//################################################
//<NumView.cpp>
// 数値を計算し出力する
//------------------------------------------------
//2013/01/30 ~
//						SekiyamaRumi
//################################################
//================================================
//インクルードヘッダ
//================================================
#include "NumView.h"


//+++++++++++++++++++++++++++++++++++++++++++++++++
// コンストラクタ
//--in---------------------------------------------
// なし
//--out--------------------------------------------
// なし
//+++++++++++++++++++++++++++++++++++++++++++++++++
NUM_VIEW::NUM_VIEW()
{
}
//+++++++++++++++++++++++++++++++++++++++++++++++++
// デストラクタ
//--in---------------------------------------------
// なし
//--out--------------------------------------------
// なし
//+++++++++++++++++++++++++++++++++++++++++++++++++
NUM_VIEW::~NUM_VIEW()
{
}

//+++++++++++++++++++++++++++++++++++++++++++++++++
// テクスチャのロード
//-------------------------------------------------
// 
//--in---------------------------------------------
// なし
//--out--------------------------------------------
// なし
//+++++++++++++++++++++++++++++++++++++++++++++++++
void NUM_VIEW::Load(char *pszFName)
{
	////テクスチャの読み込み
	//m_TexID = g_TexMng.GetTexture(pszFName, "NUMBER");

}
//+++++++++++++++++++++++++++++++++++++++++++++++++
// 描画
//-------------------------------------------------
// 
//--in---------------------------------------------
// なし
//--out--------------------------------------------
// なし
//+++++++++++++++++++++++++++++++++++++++++++++++++
void NUM_VIEW::Draw(GLuint TexID)
{
	for(int nLoop = 0; nLoop < DIGIT; nLoop ++)
	{
		m_Num[nLoop].Disp(TexID);	//スコア
	}
}
void NUM_VIEW::DrawTime(GLuint TexID)
{
	for(int nLoop = 0; nLoop < DIGIT_TIME; nLoop ++)
		m_NumT[nLoop].Disp(TexID);	//タイム
}
//+++++++++++++++++++++++++++++++++++++++++++++++++
// 更新
//-------------------------------------------------
// 
//--in---------------------------------------------
// 数値
//--out--------------------------------------------
// なし
//+++++++++++++++++++++++++++++++++++++++++++++++++
void NUM_VIEW::Updata(int nNum1)
{
	SetTex(nNum1);	//桁を計算
}
//+++++++++++++++++++++++++++++++++++++++++++++++++
// 桁を計算
//-------------------------------------------------
// 
//--in---------------------------------------------
// 数値
//--out--------------------------------------------
// なし
//+++++++++++++++++++++++++++++++++++++++++++++++++
void NUM_VIEW::SetTex(int nNum)
{
	int nTmp = nNum;
	NUMBER *numT = NULL;

	
	//０であるところは表示しない
	//if(nNum < 100000)
	//else if(nNum < 10000)
	//else if(nNum < 1000)
	//else if(nNum < 100)
	//else if(nNum < 10)

	//１桁目
	m_Num[0].SetNum(nTmp % 10);
	m_Num[0].SetPos(m_x, m_y, 4, m_num_w, m_num_h);
	if(nNum > 9)
	{
	//２桁目
	nTmp = (nTmp / 10);
	m_Num[1].SetNum(nTmp % 10);
	m_Num[1].SetPos(m_x, m_y, 3, m_num_w, m_num_h);
	}
	if(nNum > 99)
	{
		//３桁目
		nTmp = nTmp / 10;
		m_Num[2].SetNum(nTmp % 10);
		m_Num[2].SetPos(m_x, m_y, 2, m_num_w, m_num_h);
	}
	if(nNum > 999)
	{
		//４桁目
		nTmp = nTmp / 10;
		m_Num[3].SetNum(nTmp % 10);
		m_Num[3].SetPos(m_x, m_y, 1, m_num_w, m_num_h);
	}
	if(nNum > 9999)
	{
	//５桁目
	nTmp = nTmp / 10;
	m_Num[4].SetNum(nTmp % 10);
	m_Num[4].SetPos(m_x, m_y, 0, m_num_w, m_num_h);
	}

	//桁を計算し、場所とテクスチャ位置を指定する
}

//+++++++++++++++++++++++++++++++++++++++++++++++++
// 桁を計算
//-------------------------------------------------
// 
//--in---------------------------------------------
// 数値
//--out--------------------------------------------
// なし
//+++++++++++++++++++++++++++++++++++++++++++++++++
void NUM_VIEW::SetTex(DWORD s, DWORD m, DWORD mm)
{
	int nTmpmm = mm;
	int nTmpm = m;
	int nTmps = s;

	NUMBER *numT = NULL;

	//１桁目
	m_NumT[0].SetNum(nTmps % 10);
	m_NumT[0].SetPos(m_x, m_y, 7, m_num_w, m_num_h);

	//２桁目
	nTmps = (nTmps / 10);
	m_NumT[1].SetNum(nTmps % 10);
	m_NumT[1].SetPos(m_x, m_y, 6, m_num_w, m_num_h);

	//:
	m_NumT[2].SetNum(10);
	m_NumT[2].SetPos(m_x, m_y, 5, m_num_w, m_num_h);


	//１桁目
	m_NumT[3].SetNum(nTmpm % 10);
	m_NumT[3].SetPos(m_x, m_y, 4, m_num_w, m_num_h);

	//２桁目
	nTmpm = (nTmpm / 10);
	m_NumT[4].SetNum(nTmpm % 10);
	m_NumT[4].SetPos(m_x, m_y, 3, m_num_w, m_num_h);


	//:
	m_NumT[5].SetNum(10);
	m_NumT[5].SetPos(m_x, m_y, 2, m_num_w, m_num_h);


	
	//１桁目
	m_NumT[6].SetNum(nTmpmm % 10);
	m_NumT[6].SetPos(m_x, m_y, 1, m_num_w, m_num_h);

	//２桁目
	nTmpmm = (nTmpmm / 10);
	m_NumT[7].SetNum(nTmpmm % 10);
	m_NumT[7].SetPos(m_x, m_y, 0, m_num_w, m_num_h);
}
