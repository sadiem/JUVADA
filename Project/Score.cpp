//################################################
// <Score.cpp>
//
//------------------------------------------------
// 2012/11/09 ~
//2013/01/31  修正
//						SekiyamaRumi
//################################################
//================================================
//インクルードヘッダ
//================================================
#include "Score.h"		//スコアヘッダ

#include "TexMng.h"			//テクスチャマネージャ
//================================================
//定数定義
//================================================
#define ADD_POINT	  (1)		//加算値
#define SCORE_TEX_MAX (1)		//スコアテクスチャ枚数
#define FIR_POSSCORE  (1)		//スコア初期位置
#define TEX_POSSCORE  (1)		//テクスチャ数値位置
#define MAX_SCORE     (99999)	//マックススコア
#define COMBO_LIMIT	  (60)
char szNumTex[SCORE_TEX_MAX][256]={
	"TEXTURE\\2D\\number.bmp"
};

float nFirPoint[FIR_POSSCORE][2]={
	{600.0f, 0.0f}
};
float nTexPoint[TEX_POSSCORE][2]={
	{30.0f, 40.0f}
};

//++++++++++++++++++++++++++++++++++++++++++++++++
//コンストラクタ
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
SCORE::SCORE()
{
}

//++++++++++++++++++++++++++++++++++++++++++++++++
//デストラクタ
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
SCORE::~SCORE()
{
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//初期化
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
void SCORE::Init()
{
	//値の初期化
	Reset();
	//Load();

}
//++++++++++++++++++++++++++++++++++++++++++++++++
//読み込み
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
void SCORE::Load()
{
	//テクスチャ読み込み
	m_TexID = g_TexMng.GetTexture(&szNumTex[0][0], "NUMBER");
}

void SCORE::SetTexID(GLuint TexID)
{
	m_TexID = TexID;
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//更新
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
void SCORE::Update(int Enemy, int Boss)
{
	if(EnemyDeath != Enemy || BossDeath != Boss)
	{
		nCombo += (Enemy - EnemyDeath);
		nCount = COMBO_LIMIT;
		EnemyDeath = Enemy;
		BossDeath = Boss;
		Calc();					//
	}
	if(nCount <= 0)
		nCombo = 0;

	nCount--;
	if(nCount < 0)
		nCount = 0;

	if(nCombo > nMaxCombo)
		nMaxCombo = nCombo;

	//addEnemyDeathScore(num);	//スコアの加算
	NUM_VIEW::Updata(m_nScore);	//更新
}

//++++++++++++++++++++++++++++++++++++++++++++++++
//スコア値を桁計算・テクスチャ座標などセット
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
void SCORE::SetNum(void)
{
	//スコアためし
	//m_nScore = 65535;
	NUM_VIEW::Updata(m_nScore);	//更新
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//描画
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
void SCORE::Draw(void)
{
	NUM_VIEW::Draw(m_TexID);
}

//++++++++++++++++++++++++++++++++++++++++++++++++
//スコア加算:敵倒した時
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
void SCORE::addEnemyDeathScore(int num)
{
	m_nScore = num;
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//評価を計算する
//--in--------------------------------------------
// スコア
//--out-------------------------------------------
// 評価を返す
//++++++++++++++++++++++++++++++++++++++++++++++++
int SCORE::ColEvolution(void)
{
	int nTmp = 0;	//
	nTmp = m_nScore * 100 / MAX_SCORE ;
	
	//SSS判定
	if(nTmp >= SCORE_SS)
		return RANK_SSS;

	//SS判定
	if(nTmp >= SCORE_S && nTmp < SCORE_SS)
		return RANK_SS;

	//S判定
	if(nTmp >= SCORE_A && nTmp < SCORE_S)
		return RANK_S;


	//A判定
	if(nTmp >= SCORE_B && nTmp < SCORE_A)
		return RANK_A;

	//B判定
	if(nTmp >= SCORE_C && nTmp < SCORE_B)
		return RANK_B;

	//C判定
	if(nTmp >= SCORE_D && nTmp < SCORE_C)
		return RANK_C;

	//D判定
	if(nTmp < SCORE_D) 
		return RANK_D;

	return 0;
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//スコアのリセット
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
void SCORE::Reset(void)
{
	m_nScore = 0;
	
	//初期位置をセット
	NUM_VIEW::m_x = nFirPoint[0][0];
	NUM_VIEW::m_y = nFirPoint[0][1];
	
	//数値幅を指定
	NUM_VIEW::m_num_w=nTexPoint[0][0];
	NUM_VIEW::m_num_h=nTexPoint[0][1];

	
	 EnemyDeath = 0;
	 BossDeath = 0;
	 nCount = 0;
	 nCombo = 0;
	 nMaxCombo = 0;
}
void SCORE::SetVer(int X, int Y, int W, int H)
{
	//初期位置をセット
	NUM_VIEW::m_x = X;
	NUM_VIEW::m_y = Y;
	
	//数値幅を指定
	NUM_VIEW::m_num_w = W;
	NUM_VIEW::m_num_h = H;

}
//++++++++++++++++++++++++++++++++++++++++++++++++
//スコアの計算
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
void SCORE::Calc(void)
{
	m_nScore = BossDeath * 20000 + EnemyDeath * 700 + nMaxCombo * 1000;

	//限界値以上は加算されない
	if(m_nScore > MAX_SCORE)
		m_nScore = MAX_SCORE;
}
//################################################
// End of File
//################################################
