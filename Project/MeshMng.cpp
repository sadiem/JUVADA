//################################################
// <MeshMng.cpp>
// メッシュ管理クラス
//------------------------------------------------
// 2012/12/07 ~
//						SekiyamaRumi
//################################################
//================================================
//インクルードヘッダ
//================================================
#include "MeshMng.h"

//================================================
//グローバル変数
//================================================
MESH_MNG g_MeshMng;

//================================================
//プロトタイプ宣言
//================================================

//++++++++++++++++++++++++++++++++++++++++++++++++
//コンストラクタ
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
MESH_MNG::MESH_MNG()
{
	for(int nLoop = 0; nLoop < MAX_MESH; nLoop ++)
	{
		m_pMesh[nLoop] = NULL;
		lstrcpy(m_FileName[nLoop], _T(""));
		lstrcpy(m_Category[nLoop], _T(""));
	}
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//デストラクタ
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
MESH_MNG::~MESH_MNG()
{

}
//++++++++++++++++++++++++++++++++++++++++++++++++
//メッシュ取得
//--in--------------------------------------------
// 受け取り先メッシュポインタ
// 名前
// カテゴリー名
//--out-------------------------------------------
// 空きがない	(2) 
// 成功			(1) 
// 不成功		(0)　 
// 読み込み失敗(MESH.cpp内表記エラーコード)
//++++++++++++++++++++++++++++++++++++++++++++++++
int MESH_MNG:: GetMesh(MESH *pMesh, char *name, char *cat)
{
	//同じファイル名のモノがあったらそのポインタを返す
	for(int nLoop = 0; nLoop < MAX_MESH; nLoop ++)
	{
		if(m_pMesh[nLoop] && lstrcmp(m_FileName[nLoop], name) == 0)
		{
			pMesh = m_pMesh[nLoop];		//ポインタを上書き
			return 1;					//成功
		}
	}

	//同じモノがなければ空いてる場所を探す
	int nID;
	for(nID = 0; nID < MAX_MESH; nID++)
	{
		if(!m_pMesh[nID])
			break;
	}
	
	//空きがなかったらエラーコードを返す
	if(nID == MAX_MESH)
		return 2;			//空きがありません

	//新規読み込みをする
	lstrcpy(m_FileName[nID], name);	//ファイル名保存
	lstrcpy(m_Category[nID], cat);	//カテゴリー名保存
	int nRet = 0;
	nRet = LoadMesh(pMesh, name);	//メッシュのロード
	if(nRet < 0)
		return nRet;					//読み込み失敗

	return 1;	//成功
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//全部のデータを削除
//--in--------------------------------------------
// なし
//--out-------------------------------------------
// なし
//++++++++++++++++++++++++++++++++++++++++++++++++
void MESH_MNG:: ReleaseAll()
{
	for(int nLoop = 0; nLoop < MAX_MESH; nLoop ++)
	{
		ReleaseMesh(m_pMesh[nLoop]);	//メッシュデータの削除
		lstrcpy(m_FileName[nLoop], _T(""));
		lstrcpy(m_Category[nLoop], _T(""));
	}
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//カテゴリのメッシュを返す
//--in--------------------------------------------
// なし
//--out-------------------------------------------
// なし
//++++++++++++++++++++++++++++++++++++++++++++++++
void MESH_MNG:: ReleaseCat(TCHAR *cat)
{
	for(int nLoop = 0; nLoop < MAX_MESH; nLoop ++)
	{
		if(lstrcmp(m_Category[nLoop], cat) == 0)
		{
			ReleaseMesh(m_pMesh[nLoop]);	//メッシュデータの削除
			lstrcpy(m_FileName[nLoop], _T(""));
			lstrcpy(m_Category[nLoop], _T(""));
		}
	}
}

//################################################
// End of File
//################################################