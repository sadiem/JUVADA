//################################################
// <PlayerHpBar.cpp>
//
//------------------------------------------------
// 2013/01/07 ~
//						SekiyamaRumi
//################################################
//================================================
//インクルードヘッダ
//================================================
#include "PlayerHpBar.h"	//プレイヤーＨＰバーヘッダー
#include "TexMng.h"			//テクスチャマネージャ

//================================================
//定数定義
//================================================
#define HP_BAR_W	(0.66f)
#define HP_MINUS	(0.005f)
//++++++++++++++++++++++++++++++++++++++++++++++++
//コンストラクタ
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
PLAYER_HP_BAR::PLAYER_HP_BAR()
{
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//デストラクタ
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
PLAYER_HP_BAR::~PLAYER_HP_BAR()
{

}

//++++++++++++++++++++++++++++++++++++++++++++++++
//初期化
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
void PLAYER_HP_BAR::Init(void)
{
	Load ();
	//座標位置
	for(int i = 0; i < 3; i ++)
	{
		m_Poly[i][0].x  = POS_P_BAR_X;
		m_Poly[i][0].y  = POS_P_BAR_Y;
		m_Poly[i][0].z  = 0.0f;

		m_Poly[i][1].x  = POS_P_BAR_X;
		m_Poly[i][1].y  = POS_P_BAR_Y + P_BAR_H;
		m_Poly[i][1].z  = 0.0f;

		m_Poly[i][2].x  = POS_P_BAR_X + P_BAR_W;
		m_Poly[i][2].y  = POS_P_BAR_Y + P_BAR_H;
		m_Poly[i][2].z  = 0.0f;

		m_Poly[i][3].x  = POS_P_BAR_X + P_BAR_W;
		m_Poly[i][3].y  = POS_P_BAR_Y;
		m_Poly[i][3].z  = 0.0f;

		if(i == 1)
		{
			m_Poly[i][0].x  = POS_P_BAR_X + 30;
			m_Poly[i][1].x  = POS_P_BAR_X + 30;
			m_Poly[i][2].x  = POS_P_BAR_X + P_BAR_W + 30;
			m_Poly[i][3].x  = POS_P_BAR_X + P_BAR_W + 30;
		}
	}
	//テクスチャ位置のセット
	for(int i = 0; i < 3; i ++)
	{
		m_Poly[i][0].tu  = 0.0f;
		m_Poly[i][0].tv  = 1.0f - (3 * (i + 1) / 16.0f);

		m_Poly[i][1].tu  = 0.0f;
		m_Poly[i][1].tv  = 1.0f - (3 * i / 16.0f);

		m_Poly[i][2].tu  = 1.0f;
		m_Poly[i][2].tv  = 1.0f - (3 * i / 16.0f);

		m_Poly[i][3].tu  = 1.0f;
		m_Poly[i][3].tv  = 1.0f - (3 * (i + 1) / 16.0f);
	}
	Reset();
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//リセット
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
void PLAYER_HP_BAR::Reset(void)
{
	nM = 0.0f;
	//バーをマックスの状態にセット
	m_Poly[1][0].tu  = 0.0f;
	m_Poly[1][0].tv  = 1.0f - (3 * (1 + 1) / 16.0f);

	m_Poly[1][1].tu  = 0.0f;
	m_Poly[1][1].tv  = 1.0f - (3 * 1 / 16.0f);

	m_Poly[1][2].tu  = 1.0f;
	m_Poly[1][2].tv  = 1.0f - (3 * 1 / 16.0f);

	m_Poly[1][3].tu  = 1.0f;
	m_Poly[1][3].tv  = 1.0f - (3 * (1 + 1) / 16.0f);
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//読み込み
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
void PLAYER_HP_BAR::Load (void)
{
	m_TexID = g_TexMng.GetTexture("TEXTURE\\2D\\player_hp_bar.png", "PLAYER_BAR");
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//更新
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
void PLAYER_HP_BAR::Update(int nHP, int nMaxHP)
{
	float fHp;

	//プレイヤーのバーをの幅を計算する
	fHp = HP_BAR_W - (HP_BAR_W * (float)nHP / (float)nMaxHP);

	if(nM < fHp)
		nM += HP_MINUS;

	m_Poly[1][0].tu  = 0.0f + nM;
	m_Poly[1][0].tv  = 1.0f - (3 * (1 + 1) / 16.0f);

	m_Poly[1][1].tu  = 0.0f + nM;
	m_Poly[1][1].tv  = 1.0f - (3 * 1 / 16.0f);

	m_Poly[1][2].tu  = 1.0f + nM;
	m_Poly[1][2].tv  = 1.0f - (3 * 1 / 16.0f);

	m_Poly[1][3].tu  = 1.0f + nM;
	m_Poly[1][3].tv  = 1.0f - (3 * (1 + 1) / 16.0f);
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//描画
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
void PLAYER_HP_BAR::Draw(void)
{
	glEnable(GL_TEXTURE_2D);	//テクスチャ有効化
	glActiveTexture(GL_TEXTURE0);
	glBindTexture(GL_TEXTURE_2D, m_TexID);


	for(int i = 0; i < 3; i ++)
	{
		glColor3f(1.0f, 1.0f, 1.0f);
		glInterleavedArrays(GL_T2F_V3F, 0, &m_Poly[i][0]);
		glDrawArrays(GL_QUADS, 0, 4);
	}
}

//################################################
// End of File
//################################################
