//################################################
// <ShaderMng.cpp>
//
//------------------------------------------------
// 2013/1/11
//						akihito tanaka
//################################################

//================================================
//インクルードヘッダ
//================================================
#include "ShaderMng.h"			//シェーダ

//================================================
//定数定義
//================================================
//================================================
//クラス定義
//================================================


//++++++++++++++++++++++++++++++++++++++++++++++++
//コンストラクタ
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
SHADER_MNG::SHADER_MNG()
{
	Init();
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//デストラクタ
//--in--------------------------------------------
//
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
SHADER_MNG::~SHADER_MNG()
{

}

//++++++++++++++++++++++++++++++++++++++++++++++++
//初期化
//--in--------------------------------------------
//シェーダファイル一括読み込み
//--out-------------------------------------------
//
//++++++++++++++++++++++++++++++++++++++++++++++++
void SHADER_MNG::Init(void)
{
	glewInit();
	
	int i = 0;
	
	//シェーダーの作成と登録
	pShader[i++] = new CGLSL("SHADER\\phong.vts", "SHADER\\phong.frs");
	pShader[i++] = new CGLSL("SHADER\\bump.vts", "SHADER\\bump.frs");
	pShader[i++] = new CGLSL("SHADER\\PointSprite.vts", "SHADER\\PointSprite.frs");
	pShader[i++] = new CGLSL("SHADER\\cooktorrance.vts", "SHADER\\cooktorrance.frs");
	pShader[i++] = new CGLSL("SHADER\\reflect.vts", "SHADER\\reflect.frs");

}

//++++++++++++++++++++++++++++++++++++++++++++++++
//グローシェーディング用テクスチャ(通常テクスチャ)
//--in--------------------------------------------
// シェーダの種類
// テクスチャユニット番号
//--out-------------------------------------------
// なし
//++++++++++++++++++++++++++++++++++++++++++++++++
void SHADER_MNG::SetTexUnit(int type, int unit)
{
	//テクスチャの読み込み
	pShader[type]->SetTextureUnit(unit);//色
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//接ベクトル設定
//--in--------------------------------------------
// シェーダの種類
// テクスチャユニット番号
//--out-------------------------------------------
// なし
//++++++++++++++++++++++++++++++++++++++++++++++++
void SHADER_MNG::setTangent(VECTOR3 v, int type)
{
	float t[3];
	
	t[0] = v.x;
	t[1] = v.y;
	t[2] = v.z;

	GLint tangent = pShader[type]->GetTangent();
	
	glVertexAttrib3fv(tangent, t);
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//色設定
//--in--------------------------------------------
// シェーダの種類
// テクスチャユニット番号
//--out-------------------------------------------
// なし
//++++++++++++++++++++++++++++++++++++++++++++++++
void SHADER_MNG::setColor(VECTOR3 v, float alpha, int type)
{
	float c[4];
	
	c[0] = v.x;
	c[1] = v.y;
	c[2] = v.z;
	c[3] = alpha;

	GLint color = pShader[type]->GetColor();
	
	glVertexAttrib4fv(color, c);
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//バンプマッピング用テクスチャ
//--in--------------------------------------------
// シェーダの種類
// テクスチャユニット番号
//--out-------------------------------------------
// なし
//++++++++++++++++++++++++++++++++++++++++++++++++
void SHADER_MNG::SetBumpUnit(int type, int unitBump)
{
	//テクスチャの読み込み
	pShader[type]->SetNormalMapUnit(unitBump);
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//アルファ値指定
//--in--------------------------------------------
// シェーダの種類
// アルファ値
//--out-------------------------------------------
// なし
//++++++++++++++++++++++++++++++++++++++++++++++++
void SHADER_MNG::SetAlpha(int type, float Alpha)
{
	//
	pShader[type]->SetAlpha(Alpha);
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//カメラ座標取得
//--in--------------------------------------------
// シェーダの種類
// サイズ
//--out-------------------------------------------
// なし
//++++++++++++++++++++++++++++++++++++++++++++++++
void SHADER_MNG::SetCamPos(int type, VECTOR3 vPos)
{
	//
	pShader[type]->SetCamPos(vPos);
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//ポイントスプライトサイズ指定
//--in--------------------------------------------
// シェーダの種類
// サイズ
//--out-------------------------------------------
// なし
//++++++++++++++++++++++++++++++++++++++++++++++++
void SHADER_MNG::SetPSize(int type, float size)
{
	//
	pShader[type]->SetPointSize(size);
}

//++++++++++++++++++++++++++++++++++++++++++++++++
//シェーダ開始
//--in--------------------------------------------
// シェーダの種類
//--out-------------------------------------------
// なし
//++++++++++++++++++++++++++++++++++++++++++++++++
void SHADER_MNG::UseShader(int type)
{
	pShader[type]->UseShader();	//シェーダ使用開始
}
//++++++++++++++++++++++++++++++++++++++++++++++++
//シェーダ終了
//--in--------------------------------------------
// なし
//--out-------------------------------------------
// なし
//++++++++++++++++++++++++++++++++++++++++++++++++
void SHADER_MNG::UnUseShader(void)
{
	glActiveTexture(GL_TEXTURE0);
	glBindTexture(GL_TEXTURE_2D, 0); 
	glUseProgram(0);	
}
//################################################
// End of File
//################################################