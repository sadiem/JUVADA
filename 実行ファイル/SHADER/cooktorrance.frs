varying vec3 position;
varying vec3 normal;

uniform sampler2D Tex;
uniform float Alpha;

void main(void)
{
  vec4 color = texture2DProj(Tex, gl_TexCoord[0]);
  vec3 N = normalize(normal);
  vec3 L = normalize(gl_LightSource[0].position.xyz - position);
  vec3 V = normalize(position);
  vec3 H = normalize(L - V);
  
  float NV = dot(N,V);
  float NH = dot(N,H);
  float VH = dot(V,H);
  float NL = dot(N,L);
  
  float m = 0.35; 
  float cosbeta = NH;
  
  float D = exp(-(1.0-(cosbeta*cosbeta)) / (m*m*cosbeta*cosbeta)) / (4*m*m*cosbeta*cosbeta*cosbeta*cosbeta);
  float G = min(1.0, min(2.0*NH*NV/VH, 2.0*NH*NL/VH));
  
  //ƒtƒŒƒlƒ‹
  float n = 20.0;
  float c = dot(L, H);
  float g = sqrt(n*n + c*c - 1.0);
  float T1 = ((g-c)*(g-c))/((g+c)*(g+c));
  float T2 = 1.0 + ( (c*(g+c)-1.0)*(c*(g+c)-1.0) )/( (c*(g-c)+1.0)*(c*(g-c)+1.0) );
  float F = 0.5 * T1 * T2;
  
  vec3 diffuse  = gl_LightSource[0].diffuse * gl_FrontMaterial.diffuse * max(dot(L, N), 0.0);
  vec3 specular = gl_LightSource[0].diffuse * gl_FrontMaterial.specular * max(0.0, F*D*G/NV);

  gl_FragColor = color * gl_FrontMaterial.ambient;
  gl_FragColor += color * vec4(diffuse,1.0) + gl_FrontLightProduct[0].specular * vec4(specular,1.0);
  gl_FragColor.a = Alpha;
}